#include <iostream>
#include <map>
#include "ProblemMap.h"


/*
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
*/

const int CAP = 10000000;
const int IGNORE_NUM = 165;

long TriagonalNumber(long n)
{
	return n * (n + 1) / 2;
}

long long PentagonalNumber(long long n)
{
	return n * ((3 * n) - 1) / 2;
}

long long HexagonalNumber(long long n)
{
	return n * ((2 * n) - 1);
}

void ProblemMap::Problem45()
{
	std::map<long long, int> HexagonalMap;

	int n = 143;

	while (n < CAP)
	{
		long long pentNum = PentagonalNumber(n);
		long long hexNum = HexagonalNumber(n);

		HexagonalMap[hexNum] = n;

		if (HexagonalMap.find(pentNum) != HexagonalMap.end())
		{
			if (n != IGNORE_NUM)
			{
				std::cout << "N: " << pentNum << std::endl;
				break;
			}
		}

		n++;
	}
}